{"version":3,"file":"static/js/339.43b5c993.chunk.js","mappings":"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","sources":["component/Admin/UpdateProduct.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useAlert } from \"react-alert\";\r\nimport MetaData from \"../layouts/MataData/MataData\";\r\nimport Loader from \"../layouts/loader/Loader\";\r\nimport DescriptionIcon from \"@material-ui/icons/Description\";\r\nimport StorageIcon from \"@material-ui/icons/Storage\";\r\nimport {\r\n  Avatar,\r\n  Button,\r\n  TextField,\r\n  Typography,\r\n  FormControl,\r\n} from \"@material-ui/core\";\r\nimport Sidebar from \"./Siderbar\";\r\nimport {\r\n  updateProduct,\r\n  clearErrors,\r\n  getProductDetails,\r\n} from \"../../actions/productAction\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { UPDATE_PRODUCT_RESET } from \"../../constants/productsConstatns\";\r\nimport { useRouteMatch } from \"react-router-dom\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport ShoppingCartOutlinedIcon from \"@material-ui/icons/ShoppingCartOutlined\";\r\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\r\nimport AttachMoneyIcon from \"@material-ui/icons/AttachMoney\";\r\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\r\nimport CollectionsIcon from \"@mui/icons-material/Collections\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport InfoIcon from \"@mui/icons-material/Info\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Navbar from \"./Navbar\";\r\nimport useStyles from \"../User/LoginFromStyle\";\r\n\r\nfunction UpdateProduct() {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const alert = useAlert();\r\n\r\n  const classes = useStyles();\r\n  const productId = useRouteMatch().params.id;\r\n  const { error, product } = useSelector((state) => state.productDetails);\r\n\r\n \r\n  const { loading, error: updateError, isUpdated } = useSelector((state) => state.deleteUpdateProduct) || {};\r\n\r\n  const [name, setName] = useState(\"\");\r\n  const [price, setPrice] = useState(0);\r\n  const [description, setDescription] = useState(\"\");\r\n  const [category, setCategory] = useState(\"\");\r\n  const [isCategory, setIsCategory] = useState(false);\r\n  const [Stock, setStock] = useState(0);\r\n  const [images, setImages] = useState([]);\r\n  const [info , setInfo] = useState('');\r\n  const [imagesPreview, setImagesPreview] = useState([]);\r\n  const [oldImages, setOldImages] = useState([]);\r\n  const fileInputRef = useRef();\r\n  const [toggle, setToggle] = useState(false);\r\n  const categories = [\r\n    \"Cricket Kits\",\r\n    \"Batting Gloves\",\r\n    \"Batting Pads\",\r\n    \"Bats\",\r\n    \"Bags\",\r\n    \"Helmets\",\r\n    \"Balls\",\r\n    \"Stumps\",\r\n    \"Shoes\",\r\n    \"Clothing\",\r\n    \"Accessories\",\r\n  ];\r\n\r\n  const handleCategoryChange = (e) => {\r\n    setCategory(e.target.value);\r\n    setIsCategory(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!product || product._id !== productId) {\r\n      dispatch(getProductDetails(productId));\r\n    } else {\r\n      setName(product.name);\r\n      setDescription(product.description);\r\n      setPrice(product.price);\r\n      setCategory(product.category);\r\n      setInfo(product.info);  \r\n      setStock(product.Stock);\r\n      setOldImages(product.images);\r\n    }\r\n\r\n    if (error) {\r\n      alert.error(error);\r\n      dispatch(clearErrors());\r\n    }\r\n\r\n    if (updateError) {\r\n      alert.error(updateError);\r\n      dispatch(clearErrors());\r\n    }\r\n\r\n    if (isUpdated) {\r\n      alert.success(\"Product Updated Successfully\");\r\n      history.push(\"/admin/products\");\r\n      dispatch({ type: UPDATE_PRODUCT_RESET });\r\n    }\r\n  }, [\r\n    dispatch,\r\n    alert,\r\n    error,\r\n    history,\r\n    isUpdated,\r\n    productId,\r\n    product,\r\n    updateError,\r\n  ]);\r\n\r\n  const createProductSubmitHandler = (e) => {\r\n    e.preventDefault();\r\n    const myForm = new FormData();\r\n    myForm.set(\"name\", name);\r\n    myForm.set(\"price\", price);\r\n    myForm.set(\"description\", description);\r\n    myForm.set(\"category\", category);\r\n    myForm.set(\"Stock\", Stock);\r\n    myForm.set(\"info\", info);\r\n    images.forEach((currImg) => {\r\n      myForm.append(\"images\", currImg);\r\n    });\r\n\r\n    dispatch(updateProduct(productId, myForm));\r\n  };\r\n\r\n  const handleImageUpload = () => {\r\n    fileInputRef.current.click();\r\n  };\r\n\r\n  const updateProductImagesChange = (e) => {\r\n    const files = Array.from(e.target.files);\r\n    setImages([]);\r\n    setImagesPreview([]);\r\n    setOldImages([]);\r\n    files.forEach((file) => {\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        if (reader.readyState === 2) {\r\n          setImagesPreview((prev) => [...prev, reader.result]);\r\n          setImages((prev) => [...prev, reader.result]);\r\n        }\r\n      };\r\n      reader.readAsDataURL(file);\r\n    });\r\n  };\r\n\r\n  const toggleHandler = () => {\r\n    setToggle(!toggle);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <Loader />\r\n      ) : (\r\n        <>\r\n          <MetaData title=\"Update Product\" />\r\n          <div className={classes.updateProduct}>\r\n            <div className={!toggle ? `${classes.firstBox1}` : `${classes.toggleBox1}`}>\r\n              <Sidebar />\r\n            </div>\r\n            <div className={classes.secondBox1}>\r\n              <div className={classes.navBar1}>\r\n                <Navbar toggleHandler={toggleHandler} />\r\n              </div>\r\n              <div className={`${classes.formContainer} ${classes.formContainer2}`}>\r\n                <form className={`${classes.form} ${classes.form2}`} encType=\"multipart/form-data\">\r\n                  <Avatar className={classes.avatar}>\r\n                    <AddCircleOutlineIcon />\r\n                  </Avatar>\r\n                  <Typography variant=\"h5\" component=\"h1\" className={classes.heading}>\r\n                    Update Product\r\n                  </Typography>\r\n\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    className={`${classes.nameInput} ${classes.textField}`}\r\n                    label=\"Product Name\"\r\n                    required\r\n                    value={name}\r\n                    onChange={(e) => setName(e.target.value)}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                          <ShoppingCartOutlinedIcon style={{ fontSize: 20, color: \"#414141\" }} />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Price\"\r\n                    value={price}\r\n                    required\r\n                    fullWidth\r\n                    className={`${classes.passwordInput} ${classes.textField}`}\r\n                    onChange={(e) => setPrice(e.target.value)}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\" style={{ fontSize: 20, color: \"#414141\" }}>\r\n                          <AttachMoneyIcon />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Stock\"\r\n                    value={Stock}\r\n                    required\r\n                    className={`${classes.passwordInput} ${classes.textField}`}\r\n                    onChange={(e) => setStock(e.target.value)}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\" style={{ fontSize: 20, color: \"#414141\" }}>\r\n                          <StorageIcon />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Product Info\"\r\n                    value={info}\r\n                    required\r\n                    className={`${classes.passwordInput} ${classes.textField}`}\r\n                    onChange={(e) => setInfo(e.target.value)}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\" style={{ fontSize: 20, color: \"#414141\" }}>\r\n                          <InfoIcon />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n\r\n                  <div className={classes.selectOption}>\r\n                    {!isCategory && (\r\n                      <Typography variant=\"body2\" className={classes.labelText}>\r\n                       \r\n                      </Typography>\r\n                    )}\r\n                    <FormControl className={classes.formControl}>\r\n                      <Select\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        value={category}\r\n                        onChange={handleCategoryChange}\r\n                        className={classes.select}\r\n                        inputProps={{\r\n                          name: \"category\",\r\n                          id: \"category-select\",\r\n                        }}\r\n                        MenuProps={{\r\n                          classes: {\r\n                            paper: classes.menu,\r\n                          },\r\n                          anchorOrigin: {\r\n                            vertical: \"bottom\",\r\n                            horizontal: \"left\",\r\n                          },\r\n                          transformOrigin: {\r\n                            vertical: \"top\",\r\n                            horizontal: \"left\",\r\n                          },\r\n                          getContentAnchorEl: null,\r\n                        }}\r\n                      >\r\n                        {!category && (\r\n                          <MenuItem value=\"\">\r\n                            <em>Choose Category</em>\r\n                          </MenuItem>\r\n                        )}\r\n                        {categories.map((cate) => (\r\n                          <MenuItem key={cate} value={cate}>\r\n                            {cate}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                    </FormControl>\r\n                  </div>\r\n\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    className={classes.descriptionInput}\r\n                    label=\"Product Description\"\r\n                    multiline\r\n                    rows={4}\r\n                    value={description}\r\n                    onChange={(e) => setDescription(e.target.value)}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                          <DescriptionIcon className={classes.descriptionIcon} />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n\r\n                  <div className={classes.root}>\r\n                    <input\r\n                      type=\"file\"\r\n                      name=\"avatar\"\r\n                      className={classes.input}\r\n                      accept=\"image/*\"\r\n                      onChange={updateProductImagesChange}\r\n                      multiple\r\n                      style={{ display: \"none\" }}\r\n                      ref={fileInputRef}\r\n                    />\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"default\"\r\n                      className={classes.uploadAvatarButton}\r\n                      startIcon={<CloudUploadIcon style={{ color: \"#FFFFFF\" }} />}\r\n                      onClick={handleImageUpload}                    >\r\n                      <p className={classes.uploadAvatarText}>Upload Images</p>\r\n                    </Button>\r\n                  </div>\r\n\r\n                  {imagesPreview.length > 0 ? (\r\n                    <Box className={classes.imageArea}>\r\n                      {imagesPreview.map((image, index) => (\r\n                        <img\r\n                          key={index}\r\n                          src={image}\r\n                          alt=\"Product Preview\"\r\n                          className={classes.image}\r\n                        />\r\n                      ))}\r\n                    </Box>\r\n                  ) : (\r\n                    <Box className={classes.imageArea}>\r\n                      {oldImages.map((image, index) => (\r\n                        <img\r\n                          key={index}\r\n                          src={image.url}\r\n                          alt=\"Old Product Preview\"\r\n                          className={classes.image}\r\n                        />\r\n                      ))}\r\n                    </Box>\r\n                  )}\r\n\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    className={classes.loginButton}\r\n                    fullWidth\r\n                    onClick={createProductSubmitHandler}\r\n                    disabled={loading}\r\n                  >\r\n                    Update Product\r\n                  </Button>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default UpdateProduct;\r\n\r\n"],"names":["dispatch","useDispatch","history","useHistory","alert","useAlert","classes","useStyles","productId","useRouteMatch","params","id","_useSelector","useSelector","state","productDetails","error","product","_ref","deleteUpdateProduct","loading","updateError","isUpdated","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","price","setPrice","_useState5","_useState6","description","setDescription","_useState7","_useState8","category","setCategory","_useState9","_useState10","isCategory","setIsCategory","_useState11","_useState12","Stock","setStock","_useState13","_useState14","images","setImages","_useState15","_useState16","info","setInfo","_useState17","_useState18","imagesPreview","setImagesPreview","_useState19","_useState20","oldImages","setOldImages","fileInputRef","useRef","_useState21","_useState22","toggle","setToggle","useEffect","_id","getProductDetails","clearErrors","success","push","type","UPDATE_PRODUCT_RESET","_jsx","_Fragment","children","Loader","_jsxs","MetaData","title","className","updateProduct","concat","toggleBox1","firstBox1","Sidebar","secondBox1","navBar1","Navbar","toggleHandler","formContainer","formContainer2","form","form2","encType","Avatar","avatar","AddCircleOutlineIcon","Typography","variant","component","heading","TextField","fullWidth","nameInput","textField","label","required","value","onChange","e","target","InputProps","endAdornment","InputAdornment","position","ShoppingCartOutlinedIcon","style","fontSize","color","passwordInput","AttachMoneyIcon","StorageIcon","InfoIcon","selectOption","labelText","FormControl","formControl","Select","select","inputProps","MenuProps","paper","menu","anchorOrigin","vertical","horizontal","transformOrigin","getContentAnchorEl","MenuItem","map","cate","descriptionInput","multiline","rows","DescriptionIcon","descriptionIcon","root","input","accept","files","Array","from","forEach","file","reader","FileReader","onload","readyState","prev","_toConsumableArray","result","readAsDataURL","multiple","display","ref","Button","uploadAvatarButton","startIcon","CloudUploadIcon","onClick","current","click","uploadAvatarText","length","Box","imageArea","image","index","src","alt","url","loginButton","preventDefault","myForm","FormData","set","currImg","append","disabled"],"sourceRoot":""}